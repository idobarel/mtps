#!/usr/bin/env python3
from argparse import ArgumentParser
from termcolor import colored
from threading import Thread
import socket

class PortScanner():
    def __init__(self, args:dict) -> None:
        self.__dict__.update(args)
        self.done = False
        self.ports = self.ports.split("-")
        self.ports = range(int(self.ports[0]), int(self.ports[1]))
        self.chuncks = self.split(self.ports, self.threads)
        self.open = []

    def split(self, a, n):
        k, m = divmod(len(a), n)
        return (a[i*k+min(i, m):(i+1)*k+min(i+1, m)] for i in range(n))

    def checkPort(self, port:int):
        conn = False
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.connect((self.target, port))
            conn = True
        except:
            pass
        s.close()
        return conn
    
    def _scanner(self, ports:range):
        for i in ports:
            if self.done == True:
                break
            s = colored(i, "yellow")
            print(f"Checking port ***{s}***\r",end="",flush=True)
            if self.checkPort(i):
                self.open.append(i)
                if self.verbose == True:
                    print("************"+colored(i, "green")+"************")
        self.done = True
    def start(self):
        self.ts = []
        for x in self.chuncks:
            t = Thread(target=self._scanner, args=(x, ))
            t.start()
            self.ts.append(t)
        try:
            while self.done == False:
                pass
        except KeyboardInterrupt:
            print(colored("\n\nStopped by user | Shutting down threads...", "red"), flush=True)
        self.done = True
        print("\n")
        print("Open Ports: "+str(self.open))

def getArgs():
    parser = ArgumentParser(prog="mtps", description="Super fast port scanning")
    parser.add_argument("target", type=str, help="IPv4 of the target server.")
    parser.add_argument("-p", "--ports", default="1-1000", help="Specify the port range, defualt is 1-1000.")
    parser.add_argument("-v", "--verbose", default=False, action="store_true", help="Specify for verbose output.")
    parser.add_argument("-t", "--threads", default=10, type=int, help="Specify the amount of jobs.")
    return parser.parse_args().__dict__


def main():
    args = getArgs()
    socket.setdefaulttimeout(0.30)
    ps = PortScanner(args)
    ps.start()

if __name__ =="__main__":
    main()
